// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.osramos.ss13.proj1.model;

import de.osramos.ss13.proj1.model.Taskdb;
import de.osramos.ss13.proj1.model.TaskdbDataOnDemand;
import de.osramos.ss13.proj1.model.UserdbDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TaskdbDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TaskdbDataOnDemand: @Component;
    
    private Random TaskdbDataOnDemand.rnd = new SecureRandom();
    
    private List<Taskdb> TaskdbDataOnDemand.data;
    
    @Autowired
    UserdbDataOnDemand TaskdbDataOnDemand.userdbDataOnDemand;
    
    public Taskdb TaskdbDataOnDemand.getNewTransientTaskdb(int index) {
        Taskdb obj = new Taskdb();
        setBuilding(obj, index);
        setGps_1(obj, index);
        setGps_2(obj, index);
        setGps_3(obj, index);
        setGps_4(obj, index);
        setGps_5(obj, index);
        setGps_6(obj, index);
        setGps_7(obj, index);
        setGps_8(obj, index);
        setGps_9(obj, index);
        setGps_10(obj, index);
        setGps_11(obj, index);
        setGps_12(obj, index);
        setGps_End(obj, index);
        setGps_Start(obj, index);
        setPerson(obj, index);
        setPersonfunction(obj, index);
        setRoomno(obj, index);
        setTaskname(obj, index);
        setTimeslot(obj, index);
        return obj;
    }
    
    public void TaskdbDataOnDemand.setBuilding(Taskdb obj, int index) {
        String building = "building_" + index;
        obj.setBuilding(building);
    }
    
    public void TaskdbDataOnDemand.setPerson(Taskdb obj, int index) {
        String person = "person_" + index;
        obj.setPerson(person);
    }
    
    public void TaskdbDataOnDemand.setPersonfunction(Taskdb obj, int index) {
        String personfunction = "personfunction_" + index;
        obj.setPersonfunction(personfunction);
    }
    
    public void TaskdbDataOnDemand.setRoomno(Taskdb obj, int index) {
        String roomno = "roomno_" + index;
        obj.setRoomno(roomno);
    }
    
    public void TaskdbDataOnDemand.setTaskname(Taskdb obj, int index) {
        String taskname = "taskname_" + index;
        obj.setTaskname(taskname);
    }
    
    public void TaskdbDataOnDemand.setTimeslot(Taskdb obj, int index) {
        Date timeslot = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTimeslot(timeslot);
    }
    
    public Taskdb TaskdbDataOnDemand.getSpecificTaskdb(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Taskdb obj = data.get(index);
        Long id = obj.getId();
        return Taskdb.findTaskdb(id);
    }
    
    public Taskdb TaskdbDataOnDemand.getRandomTaskdb() {
        init();
        Taskdb obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Taskdb.findTaskdb(id);
    }
    
    public boolean TaskdbDataOnDemand.modifyTaskdb(Taskdb obj) {
        return false;
    }
    
    public void TaskdbDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Taskdb.findTaskdbEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Taskdb' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Taskdb>();
        for (int i = 0; i < 10; i++) {
            Taskdb obj = getNewTransientTaskdb(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
