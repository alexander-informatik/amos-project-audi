// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.osramos.ss13.proj1.model;

/*
 * #%L
 * proj1
 * %%
 * Copyright (C) 2013 Amos-Project
 * %%
 * Copyright (c) 2013 by Alexander Schmidt, Sascha Str√∂bel, Nina Aures, Riehle, http://dirkriehle.com
 * -
 * This file is part of the Amos Project - Productive Games application.
 * -
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * -
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * -
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 * #L%
 */

import de.osramos.ss13.proj1.model.Taskdb;
import de.osramos.ss13.proj1.model.Userdb;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Taskdb_Roo_Finder {
    
    public static TypedQuery<Taskdb> Taskdb.findTaskdbsById(Long id) {
        if (id == null) throw new IllegalArgumentException("The id argument is required");
        EntityManager em = Taskdb.entityManager();
        TypedQuery<Taskdb> q = em.createQuery("SELECT o FROM Taskdb AS o WHERE o.id = :id", Taskdb.class);
        q.setParameter("id", id);
        return q;
    }
    
    public static TypedQuery<Taskdb> Taskdb.findTaskdbsByPersonEquals(String person) {
        if (person == null || person.length() == 0) throw new IllegalArgumentException("The person argument is required");
        EntityManager em = Taskdb.entityManager();
        TypedQuery<Taskdb> q = em.createQuery("SELECT o FROM Taskdb AS o WHERE o.person = :person", Taskdb.class);
        q.setParameter("person", person);
        return q;
    }
    
    public static TypedQuery<Taskdb> Taskdb.findTaskdbsBySenior(Userdb senior) {
        if (senior == null) throw new IllegalArgumentException("The senior argument is required");
        EntityManager em = Taskdb.entityManager();
        TypedQuery<Taskdb> q = em.createQuery("SELECT o FROM Taskdb AS o WHERE o.senior = :senior", Taskdb.class);
        q.setParameter("senior", senior);
        return q;
    }
    
    public static TypedQuery<Taskdb> Taskdb.findTaskdbsByTrainee(Userdb trainee) {
        if (trainee == null) throw new IllegalArgumentException("The trainee argument is required");
        EntityManager em = Taskdb.entityManager();
        TypedQuery<Taskdb> q = em.createQuery("SELECT o FROM Taskdb AS o WHERE o.trainee = :trainee", Taskdb.class);
        q.setParameter("trainee", trainee);
        return q;
    }
    
}
