// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.osramos.ss13.proj1.web;

/*
 * #%L
 * proj1
 * %%
 * Copyright (C) 2013 Amos-Project
 * %%
 * Copyright (c) 2013 by Alexander Schmidt, Sascha Str√∂bel, Nina Aures, Riehle, http://dirkriehle.com
 * -
 * This file is part of the Amos Project - Productive Games application.
 * -
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * -
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * -
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 * #L%
 */

import de.osramos.ss13.proj1.model.MediaUpload;
import de.osramos.ss13.proj1.web.SeniorMediaupload;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SeniorMediaupload_Roo_Controller {
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SeniorMediaupload.createForm(Model uiModel) {
        populateEditForm(uiModel, new MediaUpload());
        return "mediauploads/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String SeniorMediaupload.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("mediaupload", MediaUpload.findMediaUpload(id));
        uiModel.addAttribute("itemId", id);
        return "mediauploads/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SeniorMediaupload.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("mediauploads", MediaUpload.findMediaUploadEntries(firstResult, sizeNo));
            float nrOfPages = (float) MediaUpload.countMediaUploads() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("mediauploads", MediaUpload.findAllMediaUploads());
        }
        return "mediauploads/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SeniorMediaupload.update(@Valid MediaUpload mediaUpload, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, mediaUpload);
            return "mediauploads/update";
        }
        uiModel.asMap().clear();
        mediaUpload.merge();
        return "redirect:/mediauploads/" + encodeUrlPathSegment(mediaUpload.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String SeniorMediaupload.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, MediaUpload.findMediaUpload(id));
        return "mediauploads/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String SeniorMediaupload.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MediaUpload mediaUpload = MediaUpload.findMediaUpload(id);
        mediaUpload.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/mediauploads";
    }
    
    void SeniorMediaupload.populateEditForm(Model uiModel, MediaUpload mediaUpload) {
        uiModel.addAttribute("mediaUpload", mediaUpload);
    }
    
    String SeniorMediaupload.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
