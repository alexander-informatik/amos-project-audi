<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div 
xmlns:jsp="http://java.sun.com/JSP/Page" 
xmlns:spring="http://www.springframework.org/tags" 
xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" 

xmlns:c="http://java.sun.com/jsp/jstl/core"
xmlns:fmt="http://java.sun.com/jsp/jstl/fmt"
xmlns:form="http://www.springframework.org/tags/form"

version="2.0">

<jsp:directive.page contentType="text/html;charset=UTF-8"/>
<jsp:output omit-xml-declaration="yes"/>


<spring:url value="/resources/js-lib/jquery-1.4.min.js" var="url_jquery" />
<spring:url value="/resources/js-lib/json.min.js" var="url_json" />
<spring:url value="/resources/img/mapicon.png" var="mapiconURL" />
<spring:url value="/resources/img/mapicon_currentlocation.png" var="mapicon_currentLocationURL" />

<script type="text/javascript" src="${url_jquery}"><div/></script>
<script type="text/javascript" src="${url_json}"><div/></script>


<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&amp;sensor=true"><div /></script>


<script type="text/javascript">
 
	function aGpsPosition()
	{
	}

	function aGpsPosition(geolocationposition)
	{
		this.timestamp = geolocationposition.timestamp;
		this.latitude = geolocationposition.coords.latitude;
		this.longitude = geolocationposition.coords.longitude;
		this.altitude = geolocationposition.coords.altitude;
		this.accuracy = geolocationposition.coords.accuracy;
		this.altitudeAccuracy = geolocationposition.coords.altitudeAccuracy;
		this.heading = geolocationposition.coords.heading;
		this.speed = geolocationposition.coords.speed;
	}

	aGpsPosition.prototype.toLatLng = function()
	{
		return new google.maps.LatLng(this.latitude, this.longitude);
	}

	function aMap()
	{
		var myclass = this;

		this.test = "it works";
		this.latlng_default = new google.maps.LatLng(48.79326, 11.41279);
		this.map;
		this.marker_currentLocation;
		this.idxNextWaypoint = 0;
		this.WaypointDetectionDistance = 50;
	
		this.directionsDisplay = new google.maps.DirectionsRenderer();
		this.directionsService = new google.maps.DirectionsService();
		
		this.route_markersArray = new Array();
		this.drawPath = new google.maps.Polyline(
		{
		    strokeColor: '#FF0000',
		    strokeOpacity: 1.0,
	   	    strokeWeight: 2
	 	 });
	
	
		this.drawPath_currentLocation_to_nextWaypoint = new google.maps.Polyline(
		{
		   strokeColor: '#00FF00',
		   strokeOpacity: 1.0,
		   strokeWeight: 2
		});
	
		this.gpsoptions = 
		{
			enableHighAccuracy: true,
			timeout: 5000,
			maximumAge: 20000
		};
	
		this.watchId = window.navigator.geolocation.watchPosition
		(
			function(pos) { myclass.device_newgps_received(new aGpsPosition(pos)); },
			this.device_gpserror, 
			this.gpsoptions
		);
	}

	aMap.prototype.initializeMap = function() 
	{
		
		var myOptions = 
		{
			zoom: 18,
			center: this.latlng_default,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			mapTypeControlOptions: 
			{
	        		mapTypeIds: [google.maps.MapTypeId.HYBRID, google.maps.MapTypeId.TERRAIN, google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE],
	        		style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR
	      		}
		};
		
		this.map = new google.maps.Map(window.document.getElementById("map_canvas"), myOptions);

		this.map.setCenter(this.latlng_default);
	
		//directionsDisplay.setMap(map);
		//directionsDisplay.setPanel(document.getElementById("directionsPanel"));
		//calcRoute();


		this.showallgps();

	}





	aMap.prototype.createNewMarker = function(id, latitude, longitude, orderedposition)
	{
		var latLng = new google.maps.LatLng(latitude, longitude);
		var image = '${mapiconURL}';
		var newMarker = 
			new google.maps.Marker(
			{
				position: latLng,
				map: this.map,
				icon: image,
				title: orderedposition.toString()
			});
			//newMarker.setDraggable(true);
			newMarker.setPosition(latLng);
			this.route_markersArray.push(newMarker);


			//google.maps.event.addListener(newMarker, "dragend", function(event)
			//{
      			//	var position = newMarker.getPosition();
			//	updategps(id,position.lat().toString(),position.lng().toString());
			//});

			//return newMarker;
	}

	
	aMap.prototype.showallgps = function()
	{	
		var myclass = this;
		this.removeMarkersFromMap(this.route_markersArray);
		// load gps coordinates	
		$.getJSON('/proj1/senior/route/${task.map.id}?gpscoordinates', function(data)
		{
			
			$.each(data, function(i, item)
			{
				//alert(item.orderedposition);
				var m = myclass.createNewMarker(item.id, item.latitude,item.longitude,item.orderedposition);
				//route_markersArray.push(m);
			});

			
			myclass.drawPath1(myclass.route_markersArray);
		});
	
	}

	aMap.prototype.drawPath1 = function(markersArray)
	{
		var path = [];
    		for(var key in markersArray)
		{
        		path.push(markersArray[key].getPosition());
    		}
		this.drawPath.setPath(path);
		this.drawPath.setMap(this.map);
	}

	aMap.prototype.removeMarkersFromMap = function(markersArray)
	{
		for(var i = 0;	i &lt; markersArray.length;i++	)
		{
    			markersArray[i].setMap(null);	
		}
		markersArray = new Array();
	}



	aMap.prototype.calcRoute = function() 
	{

		var start = "${gpsstart}";
		var ende = "${gpsend}";
		var reglang = "en";


		var request = 
		{
			origin:start, 
        		destination:ende,
        		travelMode: google.maps.DirectionsTravelMode.WALKING,
			region:reglang
		};


    		this.directionsService.route(request, function(response, status) 
		{
			if (status == google.maps.DirectionsStatus.OK)
			{
				directionsDisplay.setDirections(response);
			}
		});

	}  


	aMap.prototype.device_newgps_received = function(position)
	{
		alert(this.test);
		var myclass = amap;

		var googlegps = position.toLatLng();//new google.maps.LatLng(position.coords.latitude , position.coords.longitude);
				
		myclass.map.setCenter(googlegps);
		var image = '${mapicon_currentLocationURL}';
		if(!myclass.marker_currentLocation)
		{
			myclass.marker_currentLocation = new google.maps.Marker(
			{
				position: googlegps,
				map: myclass.map,
				icon: image,
				title: 'Your location!'
			});
		}
		else
		{
			myclass.marker_currentLocation.setPosition(googlegps);
		}
		var nextWaypoint =  myclass.route_markersArray[myclass.idxNextWaypoint].getPosition();
		var d = googlegps.getDistance( nextWaypoint );
		if(d &lt; myclass.WaypointDetectionDistance)
		{
			myclass.idxNextWaypoint++;
		}
		if(myclass.idxNextWaypoint &lt; myclass.route_markersArray.length)
		{
			positions=new Array();
			positions[0] = googlegps;
			positions[1] = myclass.route_markersArray[myclass.idxNextWaypoint].getPosition();
			myclass.drawPath_currentLocation_to_nextWaypoint.setPath(positions);
			myclass.drawPath_currentLocation_to_nextWaypoint.setMap(myclass.map);
		}
		else
		{
			myclass.drawPath_currentLocation_to_nextWaypoint.setMap(null);	
		}
	}

	aMap.prototype.device_gpserror = function(err)
	{
	}

	//Geolocation.prototype.mytest = function()
	function t()
	{
		alert("position test");
	}

	google.maps.LatLng.prototype.getDistance = function(otherLatLng)
	{
		return getDistanceFromGps( this.lng(), this.lat(), otherLatLng.lng(), otherLatLng.lat() );
	}

	function getDistanceFromGps(lon1, lat1, lon2, lat2)
	{
		var R = 6371; // Radius of the earth in km
		var dLat = (lat2-lat1).toRad();
		var dLon = (lon2-lon1).toRad(); 
		var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
		       	Math.cos(lat1.toRad()) * Math.cos(lat2.toRad()) * 
		      	Math.sin(dLon/2) * Math.sin(dLon/2); 
		var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
		var d = R * c * 1000; // Distance in m
  		return d;
	}

/** Converts numeric degrees to radians */
	if (typeof(Number.prototype.toRad) === "undefined") 
	{
  		Number.prototype.toRad = function() 
		{
    			return this * Math.PI / 180;
  		}
	}




	var amap = new aMap();
	function init()
	{
		amap.initializeMap();
	}

	
	google.maps.event.addDomListener(window, 'load', init);
	//window.onload = init;
</script>









<div>
<p>Taskname: ${task.taskname}</p>
<p>Name of Startpoint: ${task.map.startpointName}</p>
<p>Name of Endpoint: ${task.map.endpointName}</p>
<p><input type="button" value="Show Map" onClick="a.initializeMap();"></input></p>
</div>

<div id="directionsPanel"  style="width:300px;" >
Google Maps
</div>


<div id="text">
<div id="error" >
</div>
</div>


<div id="map_canvas" style="width:400px;height:600px">
<div/>
</div>



</div>
